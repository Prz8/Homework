
B.	Write a SQL code that creates the tables to hold your report sections. 


-- Create the table to hold detailed section data
CREATE TABLE detailed_section (
  customer_id INT,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(100),
  creation_date DATE,
  payment_date DATE,
  total_cash_spent DECIMAL(10, 2),
  top_30_cash_spender CHAR(1)
);

-- Create the table to hold summary section data
CREATE TABLE summary_section (
  rank INT,
  customer_id INT,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(100),
  creation_date DATE,
  total_cash_spent DECIMAL(10, 2),
  top_30_cash_spender_translated VARCHAR(3)
);


C.	Write a SQL query that will extract the raw data needed for the Detailed section of your report from the source database and verify the data’s accuracy.

-- Insert the raw data for the Detailed section
INSERT INTO detailed_section (customer_id, first_name, last_name, email, creation_date, payment_date, total_cash_spent, top_30_cash_spender)
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.create_date AS creation_date,
    p.payment_date,
    p.amount AS total_cash_spent,
    CASE
        WHEN p.amount > 105 THEN 'Y'
        ELSE 'N'
    END AS top_30_cash_spender
FROM
    customer c
JOIN
    payment p ON c.customer_id = p.customer_id;

-- Verify the data’s accuracy
SELECT * FROM detailed_section;



I verified the data’s accuracy by running the query below. I looked for any empty or invalid cells in the table, as well as spot checked the columns to make sure the rows data types matched the column’s data types.


SELECT * FROM detailed_section;




D Write code for function(s) that perform the transformation(s) you identified in part A4


-- Create or replace the function to perform the transformation
CREATE OR REPLACE FUNCTION translate_top_30_cash_spender()
    RETURNS TABLE (
        translated_top_30_cash_spender VARCHAR(3),
        customer_id INT,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        email VARCHAR(100),
        creation_date DATE,
        total_cash_spent DECIMAL(10, 2)
    ) AS $$
BEGIN
    UPDATE detailed_section
    SET top_30_cash_spender =
        CASE
            WHEN top_30_cash_spender = 'Y' THEN 'Yes'
            WHEN top_30_cash_spender = 'N' THEN 'No'
        END
    WHERE total_cash_spent > 0;
    
    RETURN QUERY SELECT
        CASE
            WHEN top_30_cash_spender = 'Yes' THEN 'Positive'
            WHEN top_30_cash_spender = 'No' THEN 'Negative'
            ELSE 'Unknown'
        END AS translated_top_30_cash_spender,
        customer_id,
        first_name,
        last_name,
        email,
        creation_date,
        total_cash_spent
    FROM detailed_section;
END;
$$
LANGUAGE PLPGSQL;

-- Verify the accuracy of the function
SELECT * FROM translate_top_30_cash_spender();
SELECT * FROM detailed_section ORDER BY total_cash_spent DESC;



E.	Write a SQL code that creates a trigger on the detailed table of the report that will continually update the summary table as data is added to the detailed table



-- Create the trigger function
CREATE OR REPLACE FUNCTION update_summary()
  RETURNS TRIGGER AS
$$
BEGIN
  -- Insert or update the corresponding row in the summary table
  INSERT INTO summary_section (customer_id, first_name, last_name, email, creation_date, total_cash_spent, top_30_cash_spender)
  VALUES (
    NEW.customer_id,
    NEW.first_name,
    NEW.last_name,
    NEW.email,
    NEW.creation_date,
    NEW.total_cash_spent,
    translate_top_30_cash_spender(NEW.top_30_cash_spender)
  )
  ON CONFLICT (customer_id) DO UPDATE
  SET
    first_name = EXCLUDED.first_name,
    last_name = EXCLUDED.last_name,
    email = EXCLUDED.email,
    creation_date = EXCLUDED.creation_date,
    total_cash_spent = EXCLUDED.total_cash_spent,
    top_30_cash_spender = EXCLUDED.top_30_cash_spender;

  RETURN NEW;
END;
$$
LANGUAGE plpgsql;

-- Create the trigger on the detailed_section table
CREATE TRIGGER update_trigger
AFTER INSERT ON detailed_section
FOR EACH ROW
EXECUTE FUNCTION update_summary();

-- Verification query

-- Insert a row into the detailed_section table
INSERT INTO detailed_section (customer_id, first_name, last_name, email, creation_date, payment_date, total_cash_spent, top_30_cash_spender)
VALUES ('777', 'John', 'Doe', 'j.d@gmail.com', '2017-02-19', NULL, 0.0, 'N');




F. Create a stored procedure that can be used to refresh the data in both your detailed and summary tables. The procedure should clear the contents of the detailed and summary tables and perform the ETL load process from part C and include comments that identify how often the stored procedure should be executed.

CREATE OR REPLACE PROCEDURE refresh_tables()
LANGUAGE plpgsql
AS $$
BEGIN
    -- Clear the contents of the detailed and summary tables
    EXECUTE 'DELETE FROM detailed_section';
    EXECUTE 'DELETE FROM summary_section';

    -- Perform the ETL load process
    INSERT INTO detailed_section (customer_id, first_name, last_name, email, creation_date, total_cash_spent, top_30_cash_spender)
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        c.email,
        c.create_date AS creation_date,
        SUM(f.rental_rate) AS total_cash_spent,
        CASE
            WHEN SUM(f.rental_rate) > 110 THEN 'Y'
            ELSE 'N'
        END AS top_30_cash_spender
    FROM
        customer c
    JOIN
        rental r ON r.customer_id = c.customer_id
    JOIN
        inventory i ON i.inventory_id = r.inventory_id
    JOIN
        film f ON i.film_id = f.film_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name, c.email, c.create_date
    ORDER BY
        total_cash_spent DESC;

    -- Update the translated value in the summary table
    UPDATE summary_section
    SET top_30_cash_spender_translated = translate_top_30_cash_spender(top_30_cash_spender);
    
END;
$$;

-- Call the refresh_tables procedure
CALL refresh_tables();

-- Verification query
SELECT * FROM summary_section;


