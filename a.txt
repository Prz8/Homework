One real-world business report that can be created is a "Customer Rental Analysis Report."


1) The rental database provides data about films, inventory, rentals, and customers that is utilized in the report.

2) For the detailed section of the report, data will be sourced from the customer, film, inventory and rental tables, whereas the summary section will solely rely on data from the detailed table.

3) The specific fields included in the detailed section of the report are:

    customer_id, first_name, last_name, status, rental_id, rental_date, return_date, inventory_id
    film_id, title, rental_rate

The specific fields included in the summary section of the report are:
 customer_count, first_name and last_name


4) In the detailed section of the report, the "status" field from the "detailed" table can undergo a custom transformation.

The "status" field in the "detailed" table can help store values as 't' or 'f', representing true or false, respectively. The custom transformation function, "transform_status", will convert these values into more meaningful representations by mapping 't' to "Active" and 'f' to "Inactive".

This transformation will improve the readability and interpretability of the "status" field in the report by using descriptive labels instead of the raw boolean values. It will provide clearer insights into the active or inactive status of customers, making the report more user-friendly and facilitating better understanding of the data.


5) The detailed section helps in monitoring rental operations by examining rental durations, return dates, and inventory utilization. This information assists in managing inventory levels and identifying any potential bottlenecks or inefficiencies in the rental process.

 Similarly, the summary section by summarizing customer counts, assists in resource allocation decisions, such as staffing requirements and inventory planning. It provides insights into demand patterns based on customer names and aiding in efficient resource utilization.

6. The frequency of updating the report should be based on the stakeholders' specific needs. To ensure that the report remains relevant and up to date, it's recommended to update it at least bi-weekly. Automating the update process can be achieved by using a scheduling tool such as pgAgent, which can execute the necessary procedures at specified intervals. It's important to note that pgAgent is not a built-in feature of pgAdmin4 and requires separate installation before use.

-- Detailed table
CREATE TABLE detailed
AS (
  SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.status,
    r.rental_id,
    r.rental_date,
    r.return_date,
    i.inventory_id,
    f.film_id,
    f.title,
    f.rental_rate
  FROM
    customer c
    JOIN rental r ON c.customer_id = r.customer_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
);

-- Summary table
CREATE TABLE summary
AS (
  SELECT 
    COUNT(customer_id) AS customer_count,
    first_name,
    last_name
  FROM 
    detailed
  GROUP BY 
    first_name,
    last_name
  ORDER BY 
    COUNT(customer_id) DESC
);

-- Raw data extraction
SELECT 
  c.customer_id,
  c.first_name,
  c.last_name,
  c.status,
  r.rental_id,
  r.rental_date,
  r.return_date,
  i.inventory_id,
  f.film_id,
  f.title,
  f.rental_rate
FROM 
  customer c
  JOIN rental r ON c.customer_id = r.customer_id
  JOIN inventory i ON r.inventory_id = i.inventory_id
  JOIN film f ON i.film_id = f.film_id;

-- Custom transformation function
CREATE FUNCTION transform_status(status CHAR(1)) RETURNS VARCHAR(10)
BEGIN
  IF status = 't' THEN
    RETURN 'Active';
  ELSE
    RETURN 'Inactive';
  END IF;
END;

-- Trigger creation
CREATE TRIGGER update_summary
AFTER INSERT ON detailed
FOR EACH ROW
BEGIN
  DELETE FROM summary WHERE first_name = NEW.first_name AND last_name = NEW.last_name;
  INSERT INTO summary (customer_count, first_name, last_name)
  SELECT COUNT(customer_id), first_name, last_name
  FROM detailed
  WHERE first_name = NEW.first_name AND last_name = NEW.last_name
  GROUP BY first_name, last_name;
END;



CREATE PROCEDURE RefreshReportData()
AS
BEGIN
    -- Clear detailed table
    DELETE FROM detailed;

    -- Clear summary table
    DELETE FROM summary;

    -- Raw data extraction and population of the detailed table
    INSERT INTO detailed (
        customer_id,
        first_name,
        last_name,
        rental_id,
        rental_date,
        return_date,
        inventory_id,
        film_id,
        title,
        rental_rate
    )
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        r.rental_id,
        r.rental_date,
        r.return_date,
        i.inventory_id,
        f.film_id,
        f.title,
        f.rental_rate
    FROM
        customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film f ON i.film_id = f.film_id;

    -- Summary table creation
    INSERT INTO summary (
        customer_count,
        first_name,
        last_name
    )
    SELECT
        COUNT(customer_id),
        first_name,
        last_name
    FROM
        detailed
    GROUP BY
        first_name,
        last_name
    ORDER BY
        COUNT(customer_id) DESC;
END;
$$ LANGUAGE SQL;

CALL RefreshReportData();
