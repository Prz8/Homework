-- PART C: Created the detailed and summary tables to hold my report table sections.

CREATE TABLE detailed (
  rental_id INT PRIMARY KEY,
  customer_id INT,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(100),
  address_id INT,
  active CHAR(1),
  rental_date TIMESTAMP
);


CREATE TABLE summary (
  customer_id INT PRIMARY KEY,
  full_name VARCHAR(100),
  email VARCHAR(100),
  total_rentals INT
);

—- Queries to verify the tables are created

-- Show the structure of the 'detailed' table
DESCRIBE detailed;

-- Show the structure of the 'summary' table
DESCRIBE summary;


-- PART D : Retrieved / Populated the necessary raw data from the source database to populate the 'detailed' section of my report.


INSERT INTO detailed (rental_id, customer_id, first_name, last_name, email, address_id, active, rental_date)
SELECT r.rental_id, c.customer_id, c.first_name, c.last_name, c.email, c.address_id, c.active, r.rental_date
FROM rental AS r
JOIN customer AS c ON c.customer_id = r.customer_id
JOIN address AS a ON a.address_id = c.address_id;

—- Queries to verify the data 

-- Show the first 5 records in the 'detailed' table
SELECT * FROM detailed LIMIT 5;

-- Show the first 5 records in the 'summary' table
SELECT * FROM summary LIMIT 5;



-- PART B : Write a function to perform a transformation of the data.

-- Function to refresh the summary table when new data is added to the detailed table
CREATE OR REPLACE FUNCTION refresh_summary_function()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  -- Clear the existing data in the summary table
  DELETE FROM summary;

  -- Update the summary table with the latest customer summary data from the detailed table
  INSERT INTO summary (customer_id, full_name, email, total_rentals)
  SELECT customer_id, CONCAT(first_name, ' ', last_name), email, COUNT(*) AS total_rentals
  FROM detailed
  WHERE active = 'Y' -- Considers only the active customers
  GROUP BY customer_id, full_name, email
  HAVING COUNT(*) >= 5
  ORDER BY total_rentals DESC
  LIMIT 25;

  RETURN NEW;
END;
$$;

—- Some queries that I tested :

-- Manually executed the refresh_summary_function to update the 'summary' table
SELECT refresh_summary_function();

-- Show the updated records in the 'summary' table
SELECT *
FROM summary;


-- PART E: Create a trigger that will continually update the summary table as data is added to the detailed table.

-- Trigger to automatically refresh the summary table when new data is inserted into the detailed table
CREATE TRIGGER refresh_summary_table
AFTER INSERT ON detailed
FOR EACH STATEMENT
EXECUTE FUNCTION refresh_summary_function();

—- Queries I ran: 
-- Insert a new record into the 'detailed' table
INSERT INTO detailed (rental_id, customer_id, first_name, last_name, email, address_id, active, rental_date)
VALUES (1001, 12345, 'John', 'Doe', 'john.doe@example.com', 1, 'Y', '2023-05-01 10:00:00');

-- Show the updated records in the 'summary' table
SELECT *
FROM summary;


-- PART F: Create a stored procedure to refresh data in both tables.

-- Stored procedure to manually refresh data in both the detailed and summary tables
CREATE OR REPLACE PROCEDURE refresh()
LANGUAGE plpgsql
AS $$
BEGIN
  -- Clear the existing data in the detailed table
  DELETE FROM detailed;
  
  -- Repopulate the detailed table with rental information
  INSERT INTO detailed (rental_id, customer_id, first_name, last_name, email, address_id, active, rental_date)
  SELECT r.rental_id, c.customer_id, c.first_name, c.last_name, c.email, c.address_id, c.active, r.rental_date
  FROM rental AS r
  JOIN customer AS c ON c.customer_id = r.customer_id
  JOIN address AS a ON a.address_id = c.address_id;
  
  -- Clear the existing data in the summary table
  DELETE FROM summary;
  
  -- Update the summary table with the latest customer summary data from the detailed table
  INSERT INTO summary (customer_id, full_name, email, total_rentals)
  SELECT

—- Queries I ran:
-- Execute the refresh stored procedure
CALL refresh();

-- Show the updated records in the 'detailed' table
SELECT *
FROM detailed
LIMIT 10;

-- Show the updated records in the 'summary' table
SELECT *
FROM summary;

